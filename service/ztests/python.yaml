script: |
  python3 -m venv v
  . v/bin/activate

  mkdir zed
  mv setup.py zed.py zed
  # -qq supresses warnings about availability of newer pip versions.
  pip install -qq ./zed

  source service.sh

  python <<EOF
  import zed
  c = zed.Client('$ZED_LAKE')
  c.create_pool('test')
  with open('in.zson') as f:
    c.load('test', f)
  for rec in c.query('from test'):
    print(rec)

  print('===')
  try:
    c.create_pool('test')
  except Exception as e:
    print(repr(e))

  print('===')
  try:
    all(c.query('from nosuchpool'))
  except Exception as e:
    print(repr(e))
  EOF

inputs:
  - name: in.zson
    data: |
      {
        u8: 0 (myuint8=uint8),
        u16: 0 (myuint16=uint16),
        u32: 0 (myuint32=uint32),
        u64: 0 (myuint64=uint64),
        i8: 0 (myint8=int8),
        i16: 0 (myint16=int16),
        i32: 0 (myint32=int32),
        i64: 0 (=myint64),
        dur: 0s (=myduration),
        tim: 1970-01-01T00:00:00Z (=mytime),
        f64: 0. (=myfloat64),
        boo: false (=mybool),
        byt: 0x00 (=mybytes),
        str: "" (=mystring),
        ip: 0.0.0.0 (=myip),
        net: 0.0.0.0/0 (=mynet),
        err: error("") (=myerror),
        nul: null (mynull=null)
      } (=primitives)
      {
        u8: 0 (myuint8=uint8),
        u16: 0 (myuint16=uint16),
        u32: 0 (myuint32=uint32),
        u64: 0 (myuint64=uint64),
        i8: 0 (myint8=int8),
        i16: 0 (myint16=int16),
        i32: 0 (myint32=int32),
        i64: 0 (=myint64),
        dur: 0s (=myduration),
        tim: 1970-01-01T00:00:00Z (=mytime),
        f64: 0. (=myfloat64),
        boo: false (=mybool),
        byt: 0x00 (=mybytes),
        str: "" (=mystring),
        ip: 0.0.0.0 (=myip),
        net: 0.0.0.0/0 (=mynet),
        err: error("") (=myerror),
        nul: null (mynull=null)
      } (=primitives)
      {
        array: [
          {
            a: 1
          },
          {
            a: 2
          }
        ]
      }
      {
        map: |{
          "a": {
            a: 1 (int32),
            b: 2 (int32)
          },
          "b": {
            a: 2 (int32),
            b: 3 (int32)
          },
          "c": {
            a: 3 (int32),
            b: 4 (int32)
          }
        }|
      }
      {
        set: |[
          1,
          2,
          3,
          4
        ]|
      }
      {
        union: "hello" ((string,[int32],[string],(string,int32)))
      }
      {
        union: [
          1 (int32),
          2 (int32)
        ] ((string,[int32],[string],(string,int32)))
      }
      {
        union: [
          "a",
          "b"
        ] ((string,[int32],[string],(string,int32)))
      }
      {
        union: 123 (int32) ((string,int32)) ((string,[int32],[string],(string,int32)))
      }
  - name: service.sh
    source: service.sh
  - name: setup.py
    source: ../../python/zed/setup.py
  - name: zed.py
    source: ../../python/zed/zed.py

outputs:
  - name: stdout
    data: |
      {'map': {'a': {'a': 1, 'b': 2}, 'b': {'a': 2, 'b': 3}, 'c': {'a': 3, 'b': 4}}}
      {'set': {1, 2, 3, 4}}
      {'union': ['a', 'b']}
      {'union': [1, 2]}
      {'union': 'hello'}
      {'array': [{'a': 1}, {'a': 2}]}
      {'union': 123}
      {'u8': 0, 'u16': 0, 'u32': 0, 'u64': 0, 'i8': 0, 'i16': 0, 'i32': 0, 'i64': 0, 'dur': datetime.timedelta(0), 'tim': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=tzutc()), 'f64': 0.0, 'boo': False, 'byt': b'\x00', 'str': '', 'ip': IPv4Address('0.0.0.0'), 'net': IPv4Network('0.0.0.0/0'), 'err': '', 'nul': None}
      {'u8': 0, 'u16': 0, 'u32': 0, 'u64': 0, 'i8': 0, 'i16': 0, 'i32': 0, 'i64': 0, 'dur': datetime.timedelta(0), 'tim': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=tzutc()), 'f64': 0.0, 'boo': False, 'byt': b'\x00', 'str': '', 'ip': IPv4Address('0.0.0.0'), 'net': IPv4Network('0.0.0.0/0'), 'err': '', 'nul': None}
      ===
      RequestError('test: pool already exists')
      ===
      RequestError('nosuchpool: pool not found')
